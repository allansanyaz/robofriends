{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundary.js","containers/App.js","reportWebVitals.js","index.js"],"names":["Card","_ref","name","email","id","react_default","a","createElement","className","src","concat","alt","CardList","robots","map","user","i","components_Card","key","SearchBox","searchfield","searchChange","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","ErrorBoundary","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","hasError","error","info","setState","Component","App","componentDidMount","fetch","then","response","json","users","onSearchChange","event","target","value","_this$state","filteredRobots","filter","robot","toLowerCase","includes","length","components_SearchBox","components_Scroll","components_ErrorBoundary","components_CardList","React","reportWebVitals","onPerfEntry","Function","__webpack_require__","e","bind","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode","src_containers_App"],"mappings":"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","file":"static/js/main.999f68da.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst Card = ({ name, email, id }) => {\r\n    // const {name, email, id} = props;\r\n    return (\r\n        <div className=\"tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5\">\r\n            <img src={`https://robohash.org/${id}?200x200`} alt=\"robots\" />\r\n            <div>\r\n                <h2>{name}</h2>\r\n                <p>{email}</p>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Card;","import React from \"react\";\r\nimport Card from \"./Card\";\r\n\r\nconst CardList = ({ robots }) => {\r\n    \r\n    return (\r\n        // Everything seems to need a div Tag unless it is a Fragment\r\n        <div>\r\n            {\r\n                // ensure that this expression always returns something\r\n                robots.map((user, i) => {\r\n                    return (\r\n                        // The Card.js item constructs our card and here wejust loop to call it to make things as modular as possible\r\n                        // JSX used to return HTML elements\r\n                        // The key is neccessary to compute incase items get deleted\r\n                        <Card \r\n                            key={i} \r\n                            id={robots[i].id}\r\n                            name={robots[i].name} \r\n                            email={robots[i].email} \r\n                        />\r\n                        // <Card id={user.id} name={user.name} email={user.email} />\r\n                    );\r\n                // Note that this robots.map expression is a variable thus do not insert semi-colon at the end\r\n                })\r\n            }\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default CardList;","import React from \"react\";\r\n\r\nconst SearchBox = ({searchfield, searchChange}) => {\r\n    return (\r\n        <input \r\n            className=\"pa3 ba b--green bg-lightest-blue\"\r\n            type=\"search\"\r\n            placeholder=\"search robots\"\r\n            onChange={searchChange}\r\n        />\r\n    );\r\n}\r\n\r\nexport default SearchBox","import React from \"react\";\r\n\r\nconst Scroll = (props) => {\r\n    return (\r\n        // The bottoms allows scrolling, each element has children\r\n        <div style={{overflowY: 'scroll', border: '5px solid black', height: '800px'}}>\r\n            {props.children}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Scroll","import React, { Component } from \"react\";\r\n\r\n// The class will handle our errors and update the Child accordingly\r\nclass ErrorBoundary extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            hasError: false\r\n        }\r\n    }\r\n\r\n    componentDidCatch(error, info) {\r\n        this.setState({ hasError: true});\r\n    }\r\n\r\n    render() {\r\n        if(this.state.hasError) {\r\n            return <h1>Oops that is not good</h1>\r\n        }\r\n        return this.props.children;\r\n\r\n    }\r\n}\r\n\r\nexport default ErrorBoundary;","import React from \"react\";\r\nimport CardList from \"../components/CardList\";\r\nimport SearchBox from \"../components/SearchBox\";\r\nimport Scroll from \"../components/Scroll.js\";\r\nimport ErrorBoundary from \"../components/ErrorBoundary\";\r\nimport './App.css';\r\n\r\n// STATE >> PROPS\r\n// PROPS: the properties that we have passed down from parent to children.These some out of STATE. So props feed state to child\r\n// STATE: the memory of our app, communication. The description of the App and an object describing it.\r\n        // State is the robot and whatever is entered in the search box\r\n// Children: Used to render children\r\n\r\n// pure components always receive something and return it\r\n// have to go back to our original way of making components the class and extensions\r\n\r\n// const App = () => {\r\nclass App extends React.Component {\r\n    // constructor used to call and define the state\r\n    // states can affect our App and they reside in the parent component\r\n    // if they have a state they are smart components\r\n    constructor() {\r\n        // call super class of ReactComponent\r\n        // JSON placeholder URL: http://jsonplaceholder.typicode.com/users\r\n        super();\r\n        this.state = {\r\n            robots: [],\r\n            searchfield: ''\r\n        }\r\n    }\r\n\r\n    componentDidMount = () => {\r\n        // fetch the JSON from somewhere then return the response JSON then set the state\r\n        // seems like then can actually chain commands together\r\n        fetch('http://jsonplaceholder.typicode.com/users')\r\n            .then(response => response.json())\r\n            .then(users => this.setState({ robots: users}));\r\n    }\r\n\r\n    onSearchChange = (event) => {\r\n        // the below is a bundle REACT method the state will not be \r\n        // this.state.searchfield = event.target.value\r\n        this.setState({ searchfield: event.target.value});\r\n    }\r\n\r\n    // classes always have to use render function which returns our view\r\n    render() {\r\n        const { robots, searchfield } = this.state; \r\n        //moving filtered robots here gives us access to it\r\n        const filteredRobots = robots.filter(robot => {\r\n            return robot.name.toLowerCase().includes(searchfield.toLowerCase());\r\n        });\r\n        // if there is a large amount of data to be fetched we could say\r\n        // loading bar here and make requests on component did load\r\n\r\n            return (!robots.length) ? \r\n            <h1>Loading</h1> :\r\n        (\r\n            // filteredRobots now needs to be communicated to the view\r\n            // the error boudary allow us to catch and handle errors accordingly\r\n            //<React.Fragment>\r\n            <div className=\"tc\">\r\n                <h1 className=\"f1\">RoboFriends</h1>\r\n                <SearchBox searchChange={this.onSearchChange} />\r\n                <Scroll>\r\n                    <ErrorBoundary>\r\n                    <CardList robots={ filteredRobots } />\r\n                    </ErrorBoundary>\r\n                </Scroll>\r\n            </div>\r\n            // App now owns robots and is allowed to change them\r\n            //</React.Fragment>\r\n        )\r\n    }\r\n}\r\n\r\nexport default App","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './containers/App'\nimport reportWebVitals from './reportWebVitals';\nimport 'tachyons';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}